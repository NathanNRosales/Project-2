from http.server import BaseHTTPRequestHandler, HTTPServer
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from urllib.parse import urlparse, parse_qs
import base64
import json
import jwt
import datetime
import sqlite3

# Host and port for the HTTP server
hostName = "localhost"
serverPort = 8080

# Generate an RSA private key
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)
numbers = private_key.private_numbers()

def int_to_base64(value):
    """Convert an integer to a Base64URL-encoded string"""
    value_hex = format(value, 'x')
    # Ensure even length
    if len(value_hex) % 2 == 1:
        value_hex = '0' + value_hex
    value_bytes = bytes.fromhex(value_hex)
    encoded = base64.urlsafe_b64encode(value_bytes).rstrip(b'=')
    return encoded.decode('utf-8')

class MyServer(BaseHTTPRequestHandler):
    # Various HTTP methods (PUT, PATCH, DELETE, HEAD) are not supported.
    # POST and GET are used for handling requests.
    
    def do_PUT(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_PATCH(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_DELETE(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_HEAD(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_POST(self):
        # Handle POST requests, used for authentication
        parsed_path = urlparse(self.path)
        params = parse_qs(parsed_path.query)
        if parsed_path.path == "/auth":
            headers = {
                "kid": "goodKID"
            }
            if 'expired' in params:
                headers["kid"] = "expiredKID"
                expiration_timestamp = datetime.datetime.utcnow() - datetime.timedelta(hours=1)
            else:
                expiration_timestamp = datetime.datetime.utcnow() + datetime.timedelta(hours=1)

            # Connect to the SQLite database
            db_connection = sqlite3.connect('totally_not_my_privateKeys.db')
            cursor = db_connection.cursor()
            
            # Retrieve the appropriate key from the database
            cursor.execute('SELECT key FROM keys WHERE exp > ?', (expiration_timestamp,))
            key_data = cursor.fetchone()
            db_connection.close()

            if key_data:
                # Encode a JWT using the selected key
                encoded_jwt = jwt.encode(
                    {"user": "username", "exp": expiration_timestamp},
                    key_data[0], algorithm="RS256", headers=headers
                )
                self.send_response(200)
                self.end_headers()
                self.wfile.write(bytes(encoded_jwt, "utf-8"))
            else:
                self.send_response(401)
                self.end_headers()
            return

        self.send_response(405)
        self.end_headers()
        return

    def do_GET(self):
        if self.path == "/.well-known/jwks.json":
            # Handle GET requests, used for retrieving JSON Web Key Set (JWKS)
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()

            # Connect to the SQLite database
            db_connection = sqlite3.connect('totally_not_my_privateKeys.db')
            cursor = db_connection.cursor()

            # Retrieve valid keys from the database
            cursor.execute('SELECT key FROM keys WHERE exp > ?', (datetime.datetime.utcnow(),))
            key_data = cursor.fetchall()
            db_connection.close()

            keys = {
                "keys": [
                    {
                        "alg": "RS256",
                        "kty": "RSA",
                        "use": "sig",
                        "kid": "goodKID",
                        "n": int_to_base64(numbers.public_numbers.n),
                        "e": int_to_base64(numbers.public_numbers.e),
                    }
                ]
            }

            if key_data:
                for row in key_data:
                    # Add valid keys to the JWKS
                    keys["keys"].append({
                        "alg": "RS256",
                        "kty": "RSA",
                        "use": "sig",
                        "kid": "your_kid",
                        "n": int_to_base64(row[0].public_numbers.n),
                        "e": int_to_base64(row[0].public_numbers.e),
                    })

            self.wfile.write(bytes(json.dumps(keys), "utf-8")
            return

        self.send_response(405)
        self.end_headers()
        return

if __name__ == "__main__":
    # Create the SQLite database and table
    db_connection = sqlite3.connect('totally_not_my_privateKeys.db')
    cursor = db_connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keys(
            kid INTEGER PRIMARY KEY AUTOINCREMENT,
            key BLOB NOT NULL,
            exp INTEGER NOT NULL
        )
    ''')

    # Serialize and store private keys in the database
    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )
    cursor.execute('INSERT INTO keys (key, exp) VALUES (?, ?)', (pem, datetime.datetime.utcnow() + datetime.timedelta(hours=1))
    db_connection.commit()
    db_connection.close()

    # Start the HTTP server
    webServer = HTTPServer((hostName, serverPort), MyServer)
    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
